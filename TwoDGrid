using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class TwoDGrid : MonoBehaviour
{
    // grid specifics
    [SerializeField]
    public int rows;
    [SerializeField]
    public int cols;
    [SerializeField]
    private Vector2 gridSize;    
    [SerializeField]
    private Vector2 gridOffset;

    // cells specifics
    [SerializeField]
    private Sprite cellSprite;
    private Vector2 cellSize;
    private Vector2 cellScale;

    public Button AddColBTN;
    public Button AddRowBTN;
    public Button DeleteColBTN;
    public Button DeleteRowBTN;
    void Start()
    {
       rows = 3;
       cols = 3;
       gridSize.x = 9;
       gridSize.y = 9;
       InitCells(); //To create one time grid can call as initial grid.
       AddColBTN.onClick.AddListener(AddCol);
       AddRowBTN.onClick.AddListener(AddRow);
       DeleteColBTN.onClick.AddListener(DeleteCol);
       DeleteRowBTN.onClick.AddListener(DeleteRow);
    }

    public void InitCells()
    {
        ClearCells();// if any button pressed, this line deletes previous grid. 
        GameObject cellObject = new GameObject();

        //creates an empty object and adds a sprite renderer component and sets the sprites to cellSprite.
        cellObject.AddComponent<SpriteRenderer>().sprite = cellSprite;

        //set the size of the sprite.
        cellSize = cellSprite.bounds.size;

        //get the new cell size, adjust the size of the cells to fit the size of the grid.
        Vector2 newCellSize = new Vector2(gridSize.x / (float)cols, gridSize.y / (float)rows);

        //get the scales and scale the cells and change their size to fit the grid.
        cellScale.x = newCellSize.x / cellSize.x ;
        cellScale.y = newCellSize.y / cellSize.y ;

        cellSize = newCellSize; //the size will be replaced by the new computed size.

        cellObject.transform.localScale = new Vector2(cellScale.x, cellScale.y);

        //fix the cells to the grid by getting the half of the grid and cells.
        gridOffset.x = -(gridSize.x / 2) + (cellSize.x /2);
        gridOffset.y = -(gridSize.y / 2) + (cellSize.y / 2);

        //fill the grid with cells
        for (int row = 0; row < rows; row++)

        {
            for (int col = 0; col < cols; col++)
            {
                //add the cell size so that two cells will have the same position x and y .
                Vector2 pos = new Vector2(col * cellSize.x + gridOffset.x + transform.position.x, row * cellSize.y + gridOffset.y + transform.position.y);

                //Instantiate the game object
                GameObject cO = Instantiate(cellObject, pos, Quaternion.identity) as GameObject;                
                cO.transform.parent = transform;
            }
        }
        //destroy the object used to instantiate the cells.
        Destroy(cellObject);
    }

    //you can see the width and height of the grid on editor.
    void OnDrawGizmos()
    {
        Gizmos.DrawWireCube(transform.position, gridSize);
    }
    //adds a row to the grid.
    public void AddRow()
    {

        rows++;
        InitCells();
        Debug.Log("" + rows);
    }
    //deletes a row to the grid.
    public void DeleteRow()
    {
        rows--;
        InitCells();
        Debug.Log("" + rows);
    }
    //adds a col to the grid.
    public void AddCol()
    {
        cols++;
        InitCells();
        Debug.Log("" + cols);
    }
    //deletes a col to the grid.
    public void DeleteCol()
    {
        cols--;
        InitCells();
        Debug.Log("" + cols);
    }

    //this method deletes previous grid.
    public void ClearCells()
    {
        for (int i = 0; i < transform.childCount; i++)
        {
            Destroy(transform.GetChild(i).gameObject);
        }

    }
}
